import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier, plot_tree

# Load Iris dataset
iris = load_iris()

# Parameters
n_classes = 3
plot_colors = ["red", "yellow", "blue"]
plot_step = 0.02

# Create subplots for each pair of features
plt.figure(figsize=(15, 10))
for pairidx, pair in enumerate([[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]):
    # Select feature pair
    X = iris.data[:, pair]
    y = iris.target

    # Train classifier
    clf = DecisionTreeClassifier().fit(X, y)

    # Plot decision boundary
    plt.subplot(2, 3, pairidx + 1)
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step),
                         np.arange(y_min, y_max, plot_step))
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu, alpha=0.6)

    # Plot training points
    for i, color in zip(range(n_classes), plot_colors):
        idx = np.where(y == i)
        plt.scatter(X[idx, 0], X[idx, 1], c=color, label=iris.target_names[i],
                    edgecolor="black", s=30)

    plt.xlabel(iris.feature_names[pair[0]])
    plt.ylabel(iris.feature_names[pair[1]])
    plt.title(f"{iris.feature_names[pair[0]]} vs {iris.feature_names[pair[1]]}")
    plt.axis("tight")

plt.suptitle("Decision surfaces of Decision Trees trained on feature pairs", fontsize=16)
plt.legend(loc="lower right", frameon=True)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

# Plot full decision tree trained on all features
plt.figure(figsize=(12, 8))
clf_full = DecisionTreeClassifier().fit(iris.data, iris.target)
plot_tree(clf_full, filled=True, feature_names=iris.feature_names, class_names=iris.target_names)
plt.title("Decision Tree trained on all Iris features", fontsize=14)
plt.show()
